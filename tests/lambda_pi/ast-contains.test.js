"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ast_1 = require("../../src/lambda_pi/ast");
const contains_1 = require("../../src/lambda_pi/contains");
function test_contains(name, parent, child, output) {
    const result = (0, contains_1.contains)(parent, child);
    test(`contains ${name}`, () => expect(result).toEqual(output));
}
const xm = new ast_1.MetaVariable("x");
test_contains("!contains(MetaVariable, MetaVariable)", new ast_1.MetaVariable("a"), new ast_1.MetaVariable("a"), false);
const [x, y, z] = [new ast_1.Variable("x"), new ast_1.Variable("y"), new ast_1.Variable("z")];
test_contains("!contains(Variable, Variable)", new ast_1.Variable("b"), new ast_1.Variable("b"), false);
const a = new ast_1.Constant("a");
test_contains("!contains(Constant, Constant)", new ast_1.Constant("c"), new ast_1.Constant("c"), false);
test_contains("!contains(TypeKind, TypeKind)", new ast_1.TypeKind, new ast_1.TypeKind, false);
const L1 = new ast_1.Lambda(x, y, z);
test_contains("!contains(Lambda, Lambda)", new ast_1.Lambda(x, y, z), new ast_1.Lambda(x, y, z), false);
const P1 = new ast_1.Pi(x, y, z);
test_contains("!contains(Pi, Pi)", new ast_1.Pi(x, y, z), new ast_1.Pi(x, y, z), false);
const A1 = new ast_1.Application(x, y);
test_contains("!contains(Application, Application", new ast_1.Application(x, y), new ast_1.Application(x, y), false);
test_contains("contains(Application, Lambda)", new ast_1.Application(L1, y), L1, true);
test_contains("contains(Application, Lambda) swapped", new ast_1.Application(y, L1), L1, true);
test_contains("!contains(Application, Lambda)", A1, L1, false);
test_contains("contains(Lambda, Pi)", new ast_1.Lambda(x, P1, z), P1, true);
test_contains("contains(Lambda, Pi) swapped", new ast_1.Lambda(x, z, P1), P1, true);
test_contains("!contains(Lambda, Pi)", L1, P1, false);
test_contains("contains(Pi, Application)", new ast_1.Pi(x, A1, y), A1, true);
test_contains("contains(Pi, Application) swapped", new ast_1.Pi(x, y, A1), A1, true);
test_contains("!contains(Pi, Application)", P1, A1, false);
test_contains("contains(Application, MetaVariable)", new ast_1.Application(x, xm), xm, true);
test_contains("contains(Application, MetaVariable) swapped", new ast_1.Application(xm, x), xm, true);
test_contains("!contains(Application, MetaVariable)", A1, xm, false);
test_contains("contains(Lambda, Variable)", L1, y, true);
test_contains("contains(Lambda, Variable) swapped", L1, z, true);
test_contains("!contains(Lambda, Variable)", L1, x, false);
test_contains("contains(Pi, Constant)", new ast_1.Pi(x, a, y), a, true);
test_contains("contains(Pi, Constant) swapped", new ast_1.Pi(x, y, a), a, true);
test_contains("!contains(Pi, Constant)", P1, a, false);
test_contains("contains(Application, TypeKind)", new ast_1.Application(x, new ast_1.TypeKind), new ast_1.TypeKind, true);
test_contains("contains(Application, TypeKind) swapped", new ast_1.Application(new ast_1.TypeKind, x), new ast_1.TypeKind, true);
test_contains("!contains(Application, TypeKind)", A1, new ast_1.TypeKind, false);
test_contains("deep contains", new ast_1.Application(new ast_1.Application(new ast_1.Application(new ast_1.Application(a, xm), x), y), z), a, true);
